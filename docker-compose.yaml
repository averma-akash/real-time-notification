networks:
 app-network: # Custom Network for All Services
  driver: bridge
services:
  real-time-notification:
   build: .
   container_name: real-time-notification
   image: real-time-notification
   restart: always
   ports:
    - "8080:8080"
   depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_healthy
   environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:oracle:thin:@host.docker.internal:1521/orclpdb  # Change if needed
      - SPRING_DATASOURCE_USERNAME=local_db
      - SPRING_DATASOURCE_PASSWORD=jordan1993
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_REDIS_HOST=redis-container-notification
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
   networks:
    - app-network
    
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-network

#redis config
  redis:
    image: redis:latest
    container_name: redis-container-notification
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - app-network
      
#Kafka Config
  kafka:
   image: bitnami/kafka:3.6.1
   container_name: kafka
   ports:
    - "9092:9092"
    - "7071:7071"
   environment:
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_BROKER_ID=1
    - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
    - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    - ALLOW_PLAINTEXT_LISTENER=yes
    - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    - KAFKA_HEAP_OPTS=-Xms512m -Xmx1024m
    - EXTRA_ARGS=-javaagent:/opt/bitnami/kafka/jmx_prometheus_javaagent-0.17.2.jar=7071:/opt/bitnami/kafka/kafka-jmx-config.yml
    - JMX_PROMETHEUS_PORT=7071
    - KAFKA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost
   volumes:
    - ./jmx_prometheus_javaagent-0.17.2.jar:/opt/bitnami/kafka/jmx_prometheus_javaagent-0.17.2.jar
    - ./kafka-jmx-config.yml:/opt/bitnami/kafka/kafka-jmx-config.yml
   depends_on:
    zookeeper:
      condition: service_healthy
   healthcheck:
    test: [
      "CMD-SHELL",
      "kafka-topics.sh --list --bootstrap-server kafka:9092 || exit 1"
    ]
    interval: 10s
    timeout: 15s
    retries: 10
    start_period: 40s
   networks:
    - app-network
    
  init-kafka:
    image: bitnami/kafka:3.6.1
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...';
      until kafka-topics.sh --bootstrap-server kafka:9092 --list; do
        sleep 5;
      done;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic notification-events --partitions 3 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic notification-topic.retry --partitions 1 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic notification-topic.dlq --partitions 1 --replication-factor 1;
      echo 'âœ… Topics created successfully.';
      "
    networks:
      - app-network
  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   container_name: kafdrop
  #   restart: always
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:9092"
  #     JVM_OPTS: "-Xms32M -Xmx64M"  # Prevents memory issues
  #   depends_on:
  #    - kafka
  #   networks:
  #    - app-network

#zookeeper 

  zookeeper:
   image: bitnami/zookeeper:3.9.1
   container_name: zookeeper
   ports:
    - "2181:2181"
   environment:
    - ALLOW_ANONYMOUS_LOGIN=yes
    - ZOO_MAX_CLIENT_CNXNS=1000
    #- ZOO_ENABLE_AUTH=yes
    #- ZOO_SERVER_USERS=admin,user
    #- ZOO_SERVER_PASSWORDS=admin,user
   healthcheck:
      test: ["CMD-SHELL", "zkServer.sh status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
   networks:
    - app-network 

# Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - kafka
      - real-time-notification
      - node-exporter
    networks:
      - app-network

# Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana 
    ports:
      - "3000:3000"
    environment:
     - GF_SECURITY_ADMIN_USER=admin
     - GF_SECURITY_ADMIN_PASSWORD=admin
     - GF_AUTH_ANONYMOUS_ENABLED=true
    depends_on:
      - prometheus
    networks:
      - app-network
  
    
    
   